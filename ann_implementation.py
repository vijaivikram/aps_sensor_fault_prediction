# -*- coding: utf-8 -*-
"""ANN_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmE4ifYoP3_Hi3GcEAfr7WTI3ZLEXqLW
"""

import tensorflow
print(tensorflow.__version__)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

pd.options.display.max_rows=1000

data = pd.read_csv('./aps_data.csv')

data.head()

data.shape

data.isnull().sum()

data = data.replace('na',np.nan)

data.isnull().sum()

data.isnull().sum().sum()

pd.DataFrame(data.isnull().sum().sort_values(ascending=False)).rename(columns={0:'Null Value Count'})

for feature in [feature for feature in data.columns if feature not in ['class']]:
  data[feature] = data[feature].fillna(data[feature].median())

data.isnull().sum().sum()

X = data.drop('class',axis=1)

X.info(verbose=True,show_counts=True)

y = data['class']

y

"""Since we have string as output and that is also a categorical variable, we are doing encoding."""

y = pd.get_dummies(y,drop_first=True)

y

from sklearn.model_selection import train_test_split
 X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

import tensorflow.keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout

classifier = Sequential()

 classifier.add(Dense(units=170, kernel_initializer='he_uniform',activation='relu',input_dim=170))
 classifier.add(Dense(units=10,kernel_initializer='he_uniform',activation='relu'))
 classifier.add(Dense(units=1,kernel_initializer='glorot_uniform',activation='sigmoid'))

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classifier.summary()

model_history = classifier.fit(X_train,y_train,batch_size=10,epochs=30,validation_split=0.25)

model_history.history.keys()

plt.plot(model_history.history['accuracy'])
plt.plot(model_history.history['val_accuracy'])

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])

y_pred = classifier.predict(X_test)

y_pred = y_pred>0.5

from sklearn.metrics import confusion_matrix
matrix = confusion_matrix(y_test,y_pred)
print(matrix)